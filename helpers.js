export function toDate(date_string) {
    // Parse the input date string "yyyy/mm/dd"
    const [year, month, day] = date_string.split('/').map(Number);
    return new Date(year, month - 1, day);
}
export function getLatestWorkdayBeforeDate(date, days_before = 7) {
    let time = date.getTime();
    for (let i = 1; true; ++i) {
        time -= 24 * 60 * 60 * 1000; // deduct a day
        if (i >= days_before) {
            const new_date = new Date(time);
            if (new_date.getDay() % 6 != 0) {
                // match if not weekend
                return new_date;
            }
        }
    }
}
export function isTodayWeekend() {
    const date = new Date;
    return date.getDay() % 6 == 0;
}
export function toICSString(title, date, time) {
    // Combine date and time into a single ISO string
    const [hours, minutes] = time.split(':').map(Number);
    const event_date_time = new Date(date);
    // Set the hours and minutes for the event
    event_date_time.setHours(hours);
    event_date_time.setMinutes(minutes);
    console.log("event_date_time", event_date_time);
    // Format the start date in YYYYMMDDTHHMMSSZ format for UTC
    const start_formatted_date = event_date_time.toISOString().replace(/[-:]/g, '').split('.')[0];
    // Calculate end time (one hour later)
    event_date_time.setHours(event_date_time.getHours() + 1);
    const end_formatted_date = event_date_time.toISOString().replace(/[-:]/g, '').split('.')[0];
    return `
BEGIN:VCALENDAR
VERSION:2.0
METHOD:PUBLISH
PRODID:{{prodid}}
CALSCALE:GREGORIAN
BEGIN:VEVENT
SUMMARY:${title}
DTSTART;TZID=Europe/Zurich:${start_formatted_date}
DTEND;TZID=Europe/Zurich:${end_formatted_date}
DESCRIPTION:{{description}}
UID:reading-group-${start_formatted_date}
STATUS:CONFIRMED
END:VEVENT
END:VCALENDAR
`.trim(); // Trim to remove extra whitespace
}
const today = new Date;
today.setHours(0);
today.setMinutes(0);
today.setSeconds(0);
today.setMilliseconds(0);
export const todayDate = today;
const holiday_cache = new Set;
export async function isHolidayZurich(date) {
    const date_string = date.toISOString();
    const year = date.getFullYear();
    const api_response = await fetch(`https://date.nager.at/api/v3/PublicHolidays/${year}/CH`);
    if (!api_response.ok) {
        throw new Error(`Failed to fetch holidays for ${year}: ${api_response.status}`);
    }
    const holidays_data = await api_response.json();
    for (const holiday of holidays_data) {
        if (holiday.global || holiday.counties.includes("CH-ZH")) {
            const holiday_date = toDate(holiday.date.replace(/-/g, '/'));
            holiday_cache.add(holiday_date.toISOString());
        }
    }
    return holiday_cache.has(date_string);
}
export function formatTitle(string) {
    return string ? string : getRandomEmojis(4);
}
export function formatURL(string) {
    return string ? `(${string})` : '';
}
export function formatAbstract(string) {
    return string ? `
Abstract:
${string}
` : '';
}
// generated by ChatGPT
function getRandomEmoji() {
    // Unicode range for emojis
    const emojiRange = [
        [0x1F600, 0x1F64F], // Emoticons
        [0x1F300, 0x1F5FF], // Miscellaneous Symbols and Pictographs
        [0x1F680, 0x1F6FF], // Transport and Map Symbols
        [0x1F700, 0x1F77F], // Alchemical Symbols
        [0x1F900, 0x1F9FF], // Supplemental Symbols and Pictographs
        [0x1FA70, 0x1FAFF]  // Symbols and Pictographs Extended-A
    ];
    const randomRange = emojiRange[Math.floor(Math.random() * emojiRange.length)];
    const randomCodePoint = Math.floor(Math.random() * (randomRange[1] - randomRange[0])) + randomRange[0];
    return String.fromCodePoint(randomCodePoint);
}
function getRandomEmojis(count) {
    let randomEmojis = '';
    for (let i = 0; i < count; i++) {
        randomEmojis += getRandomEmoji();
    }
    return randomEmojis;
}
export function esc(strings, ...args) {
    // console.log("strings", strings);
    // console.log("args", args);
    let string = "";
    for (let i = 0; i < strings.length; ++i) {
        string += strings[i] + JSON.stringify(args[i] === undefined ? "" : "" + args[i]).slice(1, -1);
    }
    return string;
}
